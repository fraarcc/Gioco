/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package uniba.it.gioco.gui;

import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import uniba.it.gioco.GameModel;
import uniba.it.gioco.database.InitDatabase;
import uniba.it.gioco.tipi.Giocatore;

/**
 *
 * @author Nikita
 */
public class JPanelNuovoGioco extends javax.swing.JPanel {
    private JFrameMain jframeMain;
    private GameModel gameModel;

    /**
     * Creates new form JPanelNuovoGioco
     */
    public JPanelNuovoGioco(JFrameMain jframeMain,GameModel gameModel) {
        this.jframeMain = jframeMain;
        this.gameModel = gameModel;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        conferma = new javax.swing.JButton();
        indietro = new javax.swing.JButton();
        jNickname = new javax.swing.JTextField();
        nicknameLabel = new javax.swing.JLabel();

        conferma.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        conferma.setText("Conferma");
        conferma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confermaActionPerformed(evt);
            }
        });

        indietro.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        indietro.setText("Torna indietro");
        indietro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indietroActionPerformed(evt);
            }
        });

        jNickname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNicknameActionPerformed(evt);
            }
        });
        jNickname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jNicknameKeyPressed(evt);
            }
        });

        nicknameLabel.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        nicknameLabel.setText("Inserire il nickname");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(324, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(indietro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(conferma, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jNickname, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nicknameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(302, 302, 302))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(nicknameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNickname, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(conferma, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indietro, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(155, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void indietroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indietroActionPerformed
        // TODO add your handling code here:
        jframeMain.showCard("mainMenu");
    }//GEN-LAST:event_indietroActionPerformed

    private void confermaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confermaActionPerformed
        // Ottieni il nickname inserito dall'utente
        String nickname = jNickname.getText();
        if(nickname.length() > 0 && nickname != null){
        if (!InitDatabase.verificaGiocatore(nickname)) {
            // Inizializza il gioco con il nickname nel GameModel esistente
            GameModel newGameModel = gameModel.inizializzaGioco(nickname);
            if (newGameModel != null) {
                try {
                    // Se la creazione del nuovo GameModel ha avuto successo, aggiorna il riferimento
                    gameModel = newGameModel;
                    // Aggiorna le istanze delle card con il nuovo GameModel
                    jframeMain.updateCards(gameModel);
                    // Mostra la card "inGame"
                    jframeMain.showCard("inGame");
                } catch (IOException ex) {
                    Logger.getLogger(JPanelNuovoGioco.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(jframeMain, "Impossibile inizializzare il gioco!", "Avviso", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(jframeMain, "Questo nickname non e' disponibile", "Avviso", JOptionPane.WARNING_MESSAGE);
            jNickname.setText("");
            jNickname.requestFocus();
        }
        } else{
            JOptionPane.showMessageDialog(jframeMain, "Inserire un nickname", "Avviso", JOptionPane.WARNING_MESSAGE);
        }
               
    }//GEN-LAST:event_confermaActionPerformed

    private void jNicknameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNicknameActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jNicknameActionPerformed

    private void jNicknameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jNicknameKeyPressed
        // TODO add your handling code here:    
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String nickname = jNickname.getText();
            if(nickname.length() > 0 && nickname != null){
            if (!InitDatabase.verificaGiocatore(nickname)) {
                // Inizializza il gioco con il nickname nel GameModel esistente
                GameModel newGameModel = gameModel.inizializzaGioco(nickname);
                if (newGameModel != null) {
                    try {
                        // Se la creazione del nuovo GameModel ha avuto successo, aggiorna il riferimento
                        gameModel = newGameModel;
                        // Aggiorna le istanze delle card con il nuovo GameModel
                        jframeMain.updateCards(gameModel);
                        // Mostra la card "inGame"
                        jframeMain.showCard("inGame");
                    } catch (IOException ex) {
                        Logger.getLogger(JPanelNuovoGioco.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(jframeMain, "Impossibile inizializzare il gioco!", "Avviso", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(jframeMain, "Questo nickname non e' disponibile", "Avviso", JOptionPane.WARNING_MESSAGE);
                jNickname.setText("");
                jNickname.requestFocus();
            }
        
        } else {
             JOptionPane.showMessageDialog(jframeMain, "Inserire un nickname", "Avviso", JOptionPane.WARNING_MESSAGE);
        }
                
    }//GEN-LAST:event_jNicknameKeyPressed
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton conferma;
    private javax.swing.JButton indietro;
    private javax.swing.JTextField jNickname;
    private javax.swing.JLabel nicknameLabel;
    // End of variables declaration//GEN-END:variables
}
