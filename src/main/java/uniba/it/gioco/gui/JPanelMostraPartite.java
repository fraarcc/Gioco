package uniba.it.gioco.gui;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import uniba.it.gioco.GameModel;
import uniba.it.gioco.database.InitDatabase;
import uniba.it.gioco.utils.Init;

public class JPanelMostraPartite extends javax.swing.JPanel {

    private GameModel gameModel;
    private JFrameMain jframeMain;

    /**
     * Creates new form JPanelMostraPartite
     */
    public JPanelMostraPartite(JFrameMain jframeMain, GameModel gameModel) {

        this.gameModel = gameModel;
        this.jframeMain = jframeMain;
        initComponents();
        prelievoDati();
    }

    private void prelievoDati() {
        try {
            ResultSet resultSet = InitDatabase.stampaPartiteDisponibiliResultSet();
            if (!resultSet.next()) {
            } else {
                String nickname = resultSet.getString("nickname");
                inserimentoTabella(resultSet);
                System.out.println(nickname);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Errore durante il recupero delle partite disponibili.", "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void rimuoviRigheConValoriNull(DefaultTableModel modelloTabella) {
        int rowCount = modelloTabella.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            for (int j = 0; j < modelloTabella.getColumnCount(); j++) {
                if (modelloTabella.getValueAt(i, j) == null) {
                    modelloTabella.removeRow(i);
                    break;
                }
            }
        }
    }

    private void inserimentoTabella(ResultSet resultSet) throws SQLException {
        DefaultTableModel modelloTabella = (DefaultTableModel) jTablePartite.getModel();
        rimuoviRigheConValoriNull(modelloTabella);
        resultSet.beforeFirst();
        while (resultSet.next()) {
            Integer id = (Integer) resultSet.getObject("id");
            String nickname = resultSet.getString("nickname");
            Timestamp timestamp = resultSet.getTimestamp("timestamp");
            SimpleDateFormat dataFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            String formattedDateTime = timestamp != null ? dataFormat.format(timestamp) : "";
            if (id != null && nickname != null && !nickname.isEmpty() && formattedDateTime != null) {
                modelloTabella.addRow(new Object[]{id, nickname, formattedDateTime});
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings(value = "unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePartite = new javax.swing.JTable();
        jButtonCarica = new javax.swing.JButton();
        jButtonIndietro = new javax.swing.JButton();
        jButtonCancella1 = new javax.swing.JButton();

        jTablePartite.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        jTablePartite.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID Partita", " Nickname", "Data Creazione"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTablePartite);
        if (jTablePartite.getColumnModel().getColumnCount() > 0) {
            jTablePartite.getColumnModel().getColumn(0).setResizable(false);
            jTablePartite.getColumnModel().getColumn(1).setResizable(false);
            jTablePartite.getColumnModel().getColumn(2).setResizable(false);
        }

        jButtonCarica.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        jButtonCarica.setText("Carica");
        jButtonCarica.setPreferredSize(new java.awt.Dimension(110, 32));
        jButtonCarica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCaricaActionPerformed(evt);
            }
        });

        jButtonIndietro.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        jButtonIndietro.setText("Indietro");
        jButtonIndietro.setPreferredSize(new java.awt.Dimension(110, 32));
        jButtonIndietro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIndietroActionPerformed(evt);
            }
        });

        jButtonCancella1.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        jButtonCancella1.setText("Cancella");
        jButtonCancella1.setPreferredSize(new java.awt.Dimension(110, 32));
        jButtonCancella1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancella1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(202, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonIndietro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancella1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCarica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(157, 157, 157))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCarica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCancella1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonIndietro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(147, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonIndietroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIndietroActionPerformed
        try {
            // TODO add your handling code here:
            jframeMain.updateCards(gameModel);
            jframeMain.showCard("mainMenu");
        } catch (IOException ex) {
            Logger.getLogger(JPanelMostraPartite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonIndietroActionPerformed

    private void jButtonCaricaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCaricaActionPerformed
        int rigaSelezionata = jTablePartite.getSelectedRow();
        if (rigaSelezionata != -1) {
            try {
                int idPartita = (int) jTablePartite.getModel().getValueAt(rigaSelezionata, 0);
                String nomeUtente = (String) jTablePartite.getModel().getValueAt(rigaSelezionata, 1);
                if (nomeUtente != null) {
                    System.out.println(nomeUtente);
                    Init init = gameModel.getInit();
                    gameModel = InitDatabase.caricaPartita(idPartita);
                    gameModel.setInit(init);
                    System.out.println(gameModel.getGiocatore().getNickname());
                    jframeMain.updateCards(gameModel);
                    jframeMain.showCard("inGame");
                } else {
                    // Mostra un messaggio di errore se il nome utente Ã¨ null
                    JOptionPane.showMessageDialog(null, "Il nome utente non e' valido.", "Errore", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(JPanelMostraPartite.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(null, "Seleziona una riga valida", "Errore", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonCaricaActionPerformed

    private void jButtonCancella1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancella1ActionPerformed

        int rigaSelezionata = jTablePartite.getSelectedRow();
        if (rigaSelezionata != -1) {
            try {
                int idPartita = (int) jTablePartite.getModel().getValueAt(rigaSelezionata, 0);
                int choice = JOptionPane.showConfirmDialog(null, "Sei sicuro di voler "
                        + "cancellare la partia?", "Conferma", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    InitDatabase.eliminaPartita(idPartita);
                    jframeMain.updateCards(gameModel);
                    jframeMain.showCard("showGames");
                }
            } catch (IOException ex) {
                Logger.getLogger(JPanelMostraPartite.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(null, "Seleziona una riga valida", "Errore", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_jButtonCancella1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancella1;
    private javax.swing.JButton jButtonCarica;
    private javax.swing.JButton jButtonIndietro;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePartite;
    // End of variables declaration//GEN-END:variables
}
